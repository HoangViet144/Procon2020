[{"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\index.js":"1","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\App.js":"2","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\reportWebVitals.js":"3","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\redux\\reducer.js":"4","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\game\\game.js":"5","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\redux\\actiontype.js":"6","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\redux\\actions.js":"7","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\agentInfoPanel\\agentInfoPanel.js":"8","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\timer\\timer.js":"9","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\matchInfoPanel\\matchInfoPanel.js":"10","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\strategies\\strategies.js":"11","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\board\\board.js":"12","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\requestManagement\\axiosRequest.js":"13","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\config.js":"14","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\board\\validation.js":"15"},{"size":885,"mtime":1606890630444,"results":"16","hashOfConfig":"17"},{"size":223,"mtime":1606812121305,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":1307,"mtime":1607077023058,"results":"20","hashOfConfig":"17"},{"size":8366,"mtime":1607187696560,"results":"21","hashOfConfig":"17"},{"size":190,"mtime":1606978630816,"results":"22","hashOfConfig":"17"},{"size":895,"mtime":1607056483053,"results":"23","hashOfConfig":"17"},{"size":1591,"mtime":1607077023623,"results":"24","hashOfConfig":"17"},{"size":432,"mtime":1607048260035,"results":"25","hashOfConfig":"17"},{"size":1568,"mtime":1606929654584,"results":"26","hashOfConfig":"17"},{"size":4911,"mtime":1607077023058,"results":"27","hashOfConfig":"17"},{"size":10135,"mtime":1607077023624,"results":"28","hashOfConfig":"17"},{"size":6999,"mtime":1607187199512,"results":"29","hashOfConfig":"17"},{"size":229,"mtime":1607184053183,"results":"30","hashOfConfig":"17"},{"size":999,"mtime":1607188060080,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1kt4gc6",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\index.js",[],["68","69"],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\App.js",["70"],"import logo from './logo.svg';\nimport './App.css';\nimport Game from './component/game/game'\n\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Game />\n        </div>\n    );\n}\n\nexport default App;\n","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\reportWebVitals.js",[],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\redux\\reducer.js",["71","72"],"import * as actionTypes from './actiontype';\r\n\r\nconst initialState = {\r\n\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.INIT_BOARD:\r\n            return {\r\n                ...state,\r\n                matchesInfo: action.payload\r\n            }\r\n        case actionTypes.INFO_BOARD:\r\n            return {\r\n                ...state,\r\n                matchInfo: {\r\n                    ...action.payload,\r\n                    startedAtUnixTime: Date.now()\r\n                }\r\n            }\r\n        case actionTypes.SET_AGENT_ACTION:\r\n            return {\r\n                ...state,\r\n                agentAction: action.payload\r\n            }\r\n        case actionTypes.UPDATE_AGENT_ACTION:\r\n            let newAgentAction = [...state.agentAction]\r\n            for (let ele of newAgentAction) {\r\n                if (ele.agentID == action.payload.agentID) {\r\n                    ele.dx = action.payload.dx\r\n                    ele.dy = action.payload.dy\r\n                    ele.type = action.payload.type\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                agentAction: [\r\n                    ...newAgentAction\r\n                ]\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\game\\game.js",["73","74"],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\redux\\actiontype.js",[],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\redux\\actions.js",[],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\agentInfoPanel\\agentInfoPanel.js",["75","76","77","78"],"import React from 'react'\r\nimport {\r\n    Button,\r\n    Grid,\r\n    TextField,\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    makeStyles\r\n}\r\n    from '@material-ui/core'\r\nimport { connect } from 'react-redux'\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    }\r\n}));\r\nconst InfoPanel = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Table>\r\n            <TableBody>\r\n                <TableRow>\r\n                    <TableCell>AgentID</TableCell>\r\n                    <TableCell>CurX</TableCell>\r\n                    <TableCell>CurY</TableCell>\r\n                    <TableCell>dx</TableCell>\r\n                    <TableCell>dy</TableCell>\r\n                    <TableCell>type</TableCell>\r\n                </TableRow>\r\n                {props.agentAction && props.agentAction.map((ele, ind) => {\r\n                    return (\r\n                        <TableRow key={ind}>\r\n                            <TableCell>{ele.agentID}</TableCell>\r\n                            <TableCell>{ele.curX}</TableCell>\r\n                            <TableCell>{ele.curY}</TableCell>\r\n                            <TableCell>{ele.dx}</TableCell>\r\n                            <TableCell>{ele.dy}</TableCell>\r\n                            <TableCell>{ele.type}</TableCell>\r\n                        </TableRow>\r\n                    )\r\n                })}\r\n            </TableBody>\r\n        </Table>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        agentAction: state.agentAction\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {})(InfoPanel)","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\timer\\timer.js",[],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\matchInfoPanel\\matchInfoPanel.js",["79","80","81","82"],"import React from 'react'\r\nimport {\r\n    Button,\r\n    Grid,\r\n    TextField,\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    makeStyles\r\n}\r\n    from '@material-ui/core'\r\nimport { connect } from 'react-redux'\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    }\r\n}));\r\nconst InfoPanel = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Table>\r\n            <TableBody>\r\n                <TableRow>\r\n                    <TableCell>ID</TableCell>\r\n                    <TableCell>team</TableCell>\r\n                    <TableCell>Room</TableCell>\r\n                    <TableCell>turns</TableCell>\r\n                    <TableCell>turn sec</TableCell>\r\n                    <TableCell>interval sec</TableCell>\r\n                </TableRow>\r\n                {props.matchInfo ?\r\n                    <TableRow>\r\n                        <TableCell>{props.matchInfo.teamID}</TableCell>\r\n                        <TableCell>{props.matchInfo.matchTo}</TableCell>\r\n                        <TableCell>{props.matchInfo.id}</TableCell>\r\n                        <TableCell>{props.matchInfo.turns}</TableCell>\r\n                        <TableCell>{props.matchInfo.turnMillis}</TableCell>\r\n                        <TableCell>{props.matchInfo.intervalMillis}</TableCell>\r\n                    </TableRow>\r\n                    : null}\r\n            </TableBody>\r\n        </Table>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        matchesInfo: state.matchesInfo\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {})(InfoPanel)","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\strategies\\strategies.js",[],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\board\\board.js",["83","84","85","86","87","88","89","90","91","92"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Button,\r\n    Grid,\r\n    TextField,\r\n    makeStyles\r\n}\r\n    from '@material-ui/core'\r\nimport { connect } from 'react-redux'\r\nimport WallImage from './wall.png'\r\nimport { validateMove } from './validation'\r\nimport { updateAgentAction } from '../../redux/actions'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // backgroundColor: theme.palette.background.dark,\r\n        minHeight: '100%',\r\n        paddingTop: theme.spacing(3),\r\n        paddingBottom: theme.spacing(3)\r\n    },\r\n    button: {\r\n        transition: 'none',\r\n        border: '1px solid black',\r\n        backgroundColor: 'white',\r\n        maxHeight: '60px',\r\n        maxWidth: '60px',\r\n        minWidth: '60px',\r\n        minHeight: '60px',\r\n        padding: '0px',\r\n        margin: '0px'\r\n    },\r\n    agentTeam1: {\r\n        backgroundColor: 'FireBrick !important'\r\n    },\r\n    agentTeam2: {\r\n        backgroundColor: 'DarkSlateBlue !important'\r\n    },\r\n    tiledTeam1: {\r\n        backgroundColor: 'OrangeRed'\r\n    },\r\n    tiledTeam2: {\r\n        backgroundColor: 'DeepSkyBlue'\r\n    },\r\n    suggestTeam1: {\r\n        //  backgroundColor: 'yellow',\r\n        //animation: '$blinkingBackground 2s infinite',\r\n        animation: '$glowing 1500ms infinite'\r\n    },\r\n    '@keyframes glowing': {\r\n        '0%': { backgroundColor: 'White', },\r\n        '50%': { backgroundColor: 'LightCyan', },\r\n        '100%': { backgroundColor: 'LightBlue', }\r\n    },\r\n    predictedMove: {\r\n        backgroundColor: 'yellow'\r\n    }\r\n}));\r\nconst Board = (props) => {\r\n    const MY_TEAM = props.teamID\r\n    const classes = useStyles();\r\n    let [buttonGroup, setButtonGroup] = useState([])\r\n    let [buttonGroupInfo, setButtonGroupInfo] = useState([])\r\n    const [decision, setDecision] = useState({\r\n        id: null,\r\n        x: null,\r\n        y: null\r\n    })\r\n\r\n    const handleChosen = (i, j) => {\r\n        if (decision.id) {\r\n            let newButtonGroupInfo = [...buttonGroupInfo]\r\n            if (validateMove(decision, { x: j, y: i }, props.agentAction, newButtonGroupInfo, MY_TEAM)) {\r\n                let type = \"stay\"\r\n                if (newButtonGroupInfo[i][j].teamID === 0) type = \"move\"\r\n                else if (newButtonGroupInfo[i][j].teamID !== MY_TEAM) type = \"remove\"\r\n\r\n                for (let ele of props.agentAction) {\r\n                    if (ele.agentID === decision.id) {\r\n                        let nextX = decision.x + ele.dx\r\n                        let nextY = decision.y + ele.dy\r\n                        newButtonGroupInfo[nextY][nextX].css =\r\n                            newButtonGroupInfo[nextY][nextX].css.filter(item => item !== \"predictedMove\")\r\n                        break;\r\n                    }\r\n                }\r\n                newButtonGroupInfo[i][j].css.push(\"predictedMove\")\r\n                props.updateAgentAction(decision, { x: j, y: i }, type)\r\n            }\r\n\r\n\r\n            setDecision({\r\n                id: null,\r\n                x: null,\r\n                y: null\r\n            })\r\n\r\n            for (var i = 0; i < props.matchInfo.height; i++) {\r\n                for (var j = 0; j < props.matchInfo.width; j++) {\r\n                    newButtonGroupInfo[i][j].css = newButtonGroupInfo[i][j].css.filter(item => item !== \"suggestTeam1\")\r\n                }\r\n            }\r\n\r\n            setButtonGroupInfo(newButtonGroupInfo)\r\n\r\n            return\r\n        }\r\n        if (buttonGroupInfo[i][j].teamID !== MY_TEAM) return\r\n        let newButtonGroupInfo = [...buttonGroupInfo]\r\n        for (let dy = -1; dy <= 1; dy++) {\r\n            for (let dx = -1; dx <= 1; dx++) {\r\n                let neighborX = j + dx\r\n                let neighborY = i + dy\r\n                if (neighborX < 0 ||\r\n                    neighborX >= props.matchInfo.width ||\r\n                    neighborY < 0 ||\r\n                    neighborY >= props.matchInfo.height)\r\n                    continue\r\n\r\n                if (newButtonGroupInfo[i][j].teamID !== MY_TEAM) continue;\r\n\r\n                newButtonGroupInfo[neighborY][neighborX].css.push(\"suggestTeam1\")\r\n            }\r\n        }\r\n        setDecision({\r\n            id: buttonGroupInfo[i][j].agentID,\r\n            x: j,\r\n            y: i\r\n        })\r\n        setButtonGroupInfo(newButtonGroupInfo)\r\n    }\r\n    useEffect(() => {\r\n\r\n        if (!props.matchInfo) return\r\n        let buttonGroupInfo = []\r\n        /// get point\r\n        for (var i = 0; i < props.matchInfo.height; i++) {\r\n            let rowInfo = []\r\n            for (var j = 0; j < props.matchInfo.width; j++) {\r\n                let info = {\r\n                    point: props.matchInfo.points[i][j],\r\n                    obstacles: false,\r\n                    css: [\"button\"],\r\n                    teamID: 0\r\n                }\r\n                rowInfo.push(info)\r\n            }\r\n            buttonGroupInfo.push(rowInfo)\r\n        }\r\n\r\n        /// get tiled\r\n        for (let i = 0; i < props.matchInfo.height; i++) {\r\n            for (let j = 0; j < props.matchInfo.width; j++) {\r\n                if (props.matchInfo.tiled[i][j] == MY_TEAM) {\r\n                    buttonGroupInfo[i][j].css.push(\"tiledTeam1\")\r\n                }\r\n                if (props.matchInfo.tiled[i][j] !== MY_TEAM && props.matchInfo.tiled[i][j]) {\r\n                    buttonGroupInfo[i][j].css.push(\"tiledTeam2\")\r\n                }\r\n            }\r\n        }\r\n\r\n        /// get treasure\r\n        for (let id in props.matchInfo.treasure) {\r\n            let x = props.matchInfo.treasure[id].x\r\n            let y = props.matchInfo.treasure[id].y\r\n            let point = props.matchInfo.treasure[id].point\r\n            let status = props.matchInfo.treasure[id].status\r\n            buttonGroupInfo[y - 1][x - 1].treasure = {\r\n                point: point,\r\n                status: status\r\n            }\r\n        }\r\n        /// get obstacles\r\n        for (let id in props.matchInfo.obstacles) {\r\n            let x = props.matchInfo.obstacles[id].x\r\n            let y = props.matchInfo.obstacles[id].y\r\n            buttonGroupInfo[y - 1][x - 1].obstacles = true\r\n        }\r\n\r\n        /// get current agents' position\r\n        for (let ind in props.matchInfo.teams) {\r\n            if (props.matchInfo.teams[ind].teamID === MY_TEAM) {\r\n                for (let id in props.matchInfo.teams[ind].agents) {\r\n                    let x = props.matchInfo.teams[ind].agents[id].x\r\n                    let y = props.matchInfo.teams[ind].agents[id].y\r\n                    let agentID = props.matchInfo.teams[ind].agents[id].agentID\r\n                    buttonGroupInfo[y - 1][x - 1].agentID = agentID\r\n                    buttonGroupInfo[y - 1][x - 1].css.push(\"agentTeam1\")\r\n                    buttonGroupInfo[y - 1][x - 1].teamID = props.matchInfo.teams[ind].teamID\r\n                }\r\n            }\r\n            if (props.matchInfo.teams[ind].teamID !== MY_TEAM) {\r\n                for (let id in props.matchInfo.teams[ind].agents) {\r\n                    let x = props.matchInfo.teams[ind].agents[id].x\r\n                    let y = props.matchInfo.teams[ind].agents[id].y\r\n                    let agentID = props.matchInfo.teams[ind].agents[id].agentID\r\n                    buttonGroupInfo[y - 1][x - 1].agentID = agentID\r\n                    buttonGroupInfo[y - 1][x - 1].css.push(\"agentTeam2\")\r\n                    buttonGroupInfo[y - 1][x - 1].teamID = props.matchInfo.teams[ind].teamID\r\n                }\r\n            }\r\n        }\r\n        setButtonGroupInfo(buttonGroupInfo)\r\n    }, [props.matchInfo])\r\n    useEffect(() => {\r\n        if (!props.matchInfo) return\r\n        let buttonGroup = []\r\n        for (var i = 0; i < props.matchInfo.height; i++) {\r\n            let buttonRow = []\r\n            for (var j = 0; j < props.matchInfo.width; j++) {\r\n                let textOut = buttonGroupInfo[i][j].point.toString()\r\n                if (!buttonGroupInfo[i][j].obstacles &&\r\n                    buttonGroupInfo[i][j].treasure &&\r\n                    buttonGroupInfo[i][j].treasure.status === 0) {\r\n                    textOut += \",T:\" + buttonGroupInfo[i][j].treasure.point.toString()\r\n                }\r\n                if (buttonGroupInfo[i][j].obstacles) {\r\n                    textOut = \"O\"\r\n                }\r\n                let css = []\r\n                for (var id in buttonGroupInfo[i][j].css) {\r\n                    css.push(classes[buttonGroupInfo[i][j].css[id]])\r\n                }\r\n                buttonRow.push(\r\n                    <Button\r\n                        key={i + j}\r\n                        className={css.join(' ')}\r\n                        disabled={buttonGroupInfo[i][j].obstacles}\r\n                        onClick={handleChosen.bind(this, i, j)}\r\n                    >\r\n                        {buttonGroupInfo[i][j].obstacles ?\r\n                            <img src={WallImage} style={{ width: '40px' }}></img> :\r\n                            textOut\r\n                        }\r\n                    </Button >\r\n                )\r\n            }\r\n            buttonGroup.push(\r\n                <Grid item key={i} md={12}>\r\n                    {buttonRow}\r\n                </Grid>\r\n            )\r\n        }\r\n        setButtonGroup(buttonGroup)\r\n    }, [buttonGroupInfo])\r\n\r\n    useEffect(() => {\r\n        if (!props.agentAction) return\r\n        let newButtonGroupInfo = [...buttonGroupInfo]\r\n        let haveDiff = false\r\n        for (let ele of props.agentAction) {\r\n            if (ele.dx != 0 || ele.dy != 0) {\r\n                haveDiff = true\r\n                newButtonGroupInfo[ele.curY + ele.dy - 1][ele.curX + ele.dx - 1].css.push(\"predictedMove\")\r\n            }\r\n        }\r\n        if (haveDiff) {\r\n            setButtonGroupInfo(newButtonGroupInfo)\r\n        }\r\n    }, [props.agentAction])\r\n    return (\r\n        <Grid\r\n            container\r\n            className={classes.root}\r\n\r\n        >\r\n            {buttonGroup}\r\n        </Grid>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        matchInfo: state.matchInfo,\r\n        agentAction: state.agentAction\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { updateAgentAction })(Board)","D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\requestManagement\\axiosRequest.js",[],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\config.js",[],"D:\\BKEL\\Procon2020\\Procon2020\\FE\\src\\component\\board\\validation.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":8,"nodeType":"99","messageId":"100","endLine":1,"endColumn":12},{"ruleId":"101","severity":1,"message":"102","line":8,"column":5,"nodeType":"103","messageId":"104","endLine":42,"endColumn":6},{"ruleId":"105","severity":1,"message":"106","line":30,"column":33,"nodeType":"107","messageId":"108","endLine":30,"endColumn":35},{"ruleId":"109","severity":1,"message":"110","line":70,"column":8,"nodeType":"111","endLine":70,"endColumn":17,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":82,"column":8,"nodeType":"111","endLine":82,"endColumn":17,"suggestions":"114"},{"ruleId":"97","severity":1,"message":"115","line":3,"column":5,"nodeType":"99","messageId":"100","endLine":3,"endColumn":11},{"ruleId":"97","severity":1,"message":"116","line":4,"column":5,"nodeType":"99","messageId":"100","endLine":4,"endColumn":9},{"ruleId":"97","severity":1,"message":"117","line":5,"column":5,"nodeType":"99","messageId":"100","endLine":5,"endColumn":14},{"ruleId":"97","severity":1,"message":"118","line":20,"column":11,"nodeType":"99","messageId":"100","endLine":20,"endColumn":18},{"ruleId":"97","severity":1,"message":"115","line":3,"column":5,"nodeType":"99","messageId":"100","endLine":3,"endColumn":11},{"ruleId":"97","severity":1,"message":"116","line":4,"column":5,"nodeType":"99","messageId":"100","endLine":4,"endColumn":9},{"ruleId":"97","severity":1,"message":"117","line":5,"column":5,"nodeType":"99","messageId":"100","endLine":5,"endColumn":14},{"ruleId":"97","severity":1,"message":"118","line":20,"column":11,"nodeType":"99","messageId":"100","endLine":20,"endColumn":18},{"ruleId":"97","severity":1,"message":"117","line":5,"column":5,"nodeType":"99","messageId":"100","endLine":5,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":98,"column":22,"nodeType":"99","messageId":"121","endLine":98,"endColumn":23},{"ruleId":"119","severity":1,"message":"122","line":99,"column":26,"nodeType":"99","messageId":"121","endLine":99,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":154,"column":49,"nodeType":"107","messageId":"108","endLine":154,"endColumn":51},{"ruleId":"109","severity":1,"message":"123","line":205,"column":8,"nodeType":"111","endLine":205,"endColumn":25,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":233,"column":29,"nodeType":"127","endLine":233,"endColumn":76},{"ruleId":"109","severity":1,"message":"128","line":246,"column":8,"nodeType":"111","endLine":246,"endColumn":25,"suggestions":"129"},{"ruleId":"105","severity":1,"message":"130","line":253,"column":24,"nodeType":"107","messageId":"108","endLine":253,"endColumn":26},{"ruleId":"105","severity":1,"message":"130","line":253,"column":39,"nodeType":"107","messageId":"108","endLine":253,"endColumn":41},{"ruleId":"109","severity":1,"message":"131","line":262,"column":8,"nodeType":"111","endLine":262,"endColumn":27,"suggestions":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'matchID', 'props.matchInfo', and 'props.matchesInfo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCounter' needs the current value of 'matchID'.","ArrayExpression",["135"],"React Hook useEffect has missing dependencies: 'autoGenerateAction', 'handleSendAction', and 'matchID'. Either include them or remove the dependency array.",["136"],"'Button' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'classes' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'j' is already defined.","React Hook useEffect has a missing dependency: 'MY_TEAM'. Either include it or remove the dependency array.",["137"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'classes', 'handleChosen', and 'props.matchInfo'. Either include them or remove the dependency array.",["138"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'buttonGroupInfo'. Either include it or remove the dependency array.",["139"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [counter, matchID, props.matchInfo, props.matchesInfo]",{"range":"150","text":"151"},"Update the dependencies array to be: [autoGenerateAction, counter, handleSendAction, matchID]",{"range":"152","text":"153"},"Update the dependencies array to be: [MY_TEAM, props.matchInfo]",{"range":"154","text":"155"},"Update the dependencies array to be: [buttonGroupInfo, classes, handleChosen, props.matchInfo]",{"range":"156","text":"157"},"Update the dependencies array to be: [buttonGroupInfo, props.agentAction]",{"range":"158","text":"159"},[2433,2442],"[counter, matchID, props.matchInfo, props.matchesInfo]",[2790,2799],"[autoGenerateAction, counter, handleSendAction, matchID]",[7568,7585],"[MY_TEAM, props.matchInfo]",[9266,9283],"[buttonGroupInfo, classes, handleChosen, props.matchInfo]",[9829,9848],"[buttonGroupInfo, props.agentAction]"]